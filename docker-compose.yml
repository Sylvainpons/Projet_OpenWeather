version: '3.8'

services:
  # Service MongoDB
  mongo:
    image: mongo:latest
    container_name: mongodb
    ports:
      - "27017:27017"  # Expose MongoDB sur le port 27017
    volumes:
      - mongo-data:/data/db
      - ./init-scripts:/docker-entrypoint-initdb.d  # Pour les scripts d'initialisation (optionnel)
    networks:
      - backend

  # Service Producteur (Kafka)
  kafka-producer:
    build:
      context: .
      dockerfile: Dockerfile.producer
    environment:
      - KAFKA_SERVER=kafka:9092
      - MONGO_URI=mongodb://mongo:27017
    depends_on:
      - kafka
      - mongo
    networks:
      - backend

  # Service Consommateur (Streamlit)
  streamlit-consumer:
    build:
      context: .
      dockerfile: Dockerfile.streamlit
    ports:
      - "8501:8501"  # Expose Streamlit sur le port 8501
    environment:
      - KAFKA_SERVER=kafka:9092
      - MONGO_URI=mongodb://mongo:27017
    depends_on:
      - kafka
      - mongo
    networks:
      - backend

  # Service Kafka (nécessaire pour le producteur Kafka)
  kafka:
    image: wurstmeister/kafka:latest
    container_name: kafka
    environment:
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:9092,OUTSIDE://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_LISTENERS: INSIDE://0.0.0.0:9092,OUTSIDE://0.0.0.0:9092
      KAFKA_LISTENER_NAME: INSIDE
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
    ports:
      - "9092:9092"
    networks:
      - backend

  # Service Zookeeper (nécessaire pour Kafka)
  zookeeper:
    image: wurstmeister/zookeeper:latest
    container_name: zookeeper
    ports:
      - "2181:2181"
    networks:
      - backend

# Volumes pour persister les données
volumes:
  mongo-data:

# Réseaux pour la communication interne
networks:
  backend:
    driver: bridge
